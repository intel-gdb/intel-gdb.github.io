{"name":"GDB VLA support","tagline":"Variable Length Array support for C99 and Fortran","body":"This repository hosts the GDB Variable Length Array (VLA) implementation for C99 and Fortran (dynamic arrays).\r\n\r\n\r\n# Introduction\r\nA variable length array (VLA) is an array, whose size resp. length is computed at run time and not at compile time for languages, which have automatic storage duration. This means that a variable will be allocated and deallocated automatically when the program flow enters and leaves its context. VLA's will be also called dynamic arrays in the Fortran area. In the past VLA's were just an GCC extension. Later the concept was included into C99. Although C99 supports dynamic arrays, C++ doesn't. Also not with the latest standard C++0x. Indeed, there is a proposal to introduce a library based solution to have a concept like VLA in C++[1]. However, in C++ one can use std::vector, but this it is not the same, as it uses dynamic memory and a pointer structure. It also allows the user to increase the size of the vector after initialization, whereas VLA's in C don't allow that.\r\n\r\nThis project will add VLA support for C99 and Fortran to GDB, as thevanilla GDB is not able to debug dynamic array structures (Sept. 2013). This means that it is not possible to get the type or the value of a VLA using GDB in C and Fortran. The debugger does not crash when one tries to access a VLA, but the returned information is just useles and confusing for the user.\r\n\r\n\r\n[1] http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2648.html\r\n\r\n# Examples\r\nA basic C99 example of an array, whose size will be computed at compile time:\r\n<pre>void func() {\r\n  int array[100];\r\n}</pre>\r\n\r\nA basic C99 example of a variable length array, whose size will be computed at run-time:\r\n<pre>void func(int n) {\r\n  int array[n];\r\n}</pre>\r\n\r\nExample for a VLA in Fortran:\r\n<pre>program VLA\r\n  implicit none\r\n  real, allocatable :: array(:)\r\n  allocate (array(100))\r\nend program VLA</pre>\r\n\r\n\r\n# Structure of the repository\r\n\r\nThe repository is a clone of the GDB repository, which will be updated on a non-regular basis. The main development of the VLA feature is done on branches.\r\n\r\nCurrent active branches:\r\n* [vla](https://github.com/intel-gdb/vla/vla)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}